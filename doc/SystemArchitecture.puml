@startuml
' Определяем основные компоненты системы

' Пользователь и клиенты
class "Пользователь" as User
class "Веб-приложение (React)" as WebApp
class "Мобильное приложение (React Native)" as MobileApp
class "Панель администратора (React Admin)" as AdminApp

' Отдельная сущность: Приложение Laravel
rectangle "Приложение Laravel" {
    class "Laravel" as LaravelApp
}

' Отдельная сущность: GraphQL API (Node.js)
rectangle "GraphQL API (Node.js)" {
    class "GraphQL API (Node.js)" as GraphQLAPI
}

' Отдельная сущность: WebSocket сервер
rectangle "Сервер реального времени (Node.js)" {
    class "WebSocket сервер (Node.js)" as WS
}

' Отдельная сущность: AI API
rectangle "Система ИИ (Node.js)" {
    class "AI API (Node.js)" as AIAPI
}

' Слой базы данных
rectangle "Слой базы данных" {
    class "База данных (PostgreSQL)" as DB
    class "Redis" as RedisLayer
}

' Взаимодействие пользователей с клиентами
User --> WebApp : "Взаимодействует с"
User --> MobileApp : "Взаимодействует с"
User --> AdminApp : "Взаимодействует с"

' Клиенты запрашивают данные через GraphQL API
WebApp --> GraphQLAPI : "Запрашивает данные (кастомный токен)"
MobileApp --> GraphQLAPI : "Запрашивает данные (кастомный токен)"
AdminApp --> GraphQLAPI : "Запрашивает данные (кастомный токен)"

' Клиенты получают уведомления через WebSocket сервер
WebApp <-- WS : "Получает уведомления"
MobileApp <-- WS : "Получает уведомления"
AdminApp <-- WS : "Получает уведомления"

' WebSocket сервер получает события от Laravel
WS --> LaravelApp : "Обрабатывает события"
LaravelApp --> WS : "Отправляет события"

' GraphQL API получает данные напрямую из базы данных PostgreSQL
GraphQLAPI --> DB : "Чтение/Запись данных"

' GraphQL API может обращаться к AI API
GraphQLAPI --> AIAPI : "Отправляет запросы ИИ"

' Взаимодействие между базой данных и Redis для кеширования
DB --> RedisLayer : "Кеширование и очереди"

' Laravel может взаимодействовать с GraphQL API
LaravelApp --> GraphQLAPI : "Дополнительные запросы"

' Приложение Laravel работает с базой данных и Redis
LaravelApp --> DB : "Чтение/Запись данных"
LaravelApp --> RedisLayer : "Кеширование и очереди"

WebApp <-- WS : "Получает уведомления"
AdminApp <-- WS : "Получает уведомления"
@enduml
